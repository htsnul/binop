#### Lambda args ####

then = (() => (
  ()var i = (()$args.l ? 0 : 1);
  ()(()$args.r.(()$i))();
));

0 then((() => (
  ()print(a);
)), (() => (
  ()print(b);
)));

1 then((() => (
  ()print(c);
)), (() => (
  ()print(d);
)));

#### Lambda array ####

i = 0;
ary = (
  (() => (()print(4))),
  (() => (()print(5)))
);
()(()$ary.0)();

#### Arithmetic ####

()print((3 + 10) - (8 + 4 + 2));

#### Condtions ####

0 && (()print(10));
1 && (()print(11));
1 && (
  ()print(12);
);

#### Variable ####

a = 5;
()print(()$a);
a = (()$a + 3);
()print(()$a);

#### User function ####

printLeftRightAndSum = (() => (
  ()print(()$args.l);
  ()print(()$args.r);
  ()print(()$args.l + (()$args.r));
));

(1)printLeftRightAndSum(2);
(3)printLeftRightAndSum(4);

#### Ternary operator ####

()print(0 ? 3 : 4);
()print(1 ? 3 : 4);
()print(0 ? 0 : 5);
()print(1 ? 0 : 5);

()print(0 && 3 || 4);
()print(1 && 3 || 4);
()print(0 && 0 || 5);
()print(1 && 0 || 5);

#### Fibonacci ####

fib = (() => (
  ((()$args.r) < 2) ? (
    ()$args.r
  ) : (
    (()fib(()$args.r - 1)) +
    (()fib(()$args.r - 2))
  )
));
()print(()fib(7));
()print(()fib(8));
()print(()fib(9));
()print(()fib(10));

#### Dictionary ####

a = ((b: 2) + (c: (d: 3)));
()print(()$a.b);
()print(()$a.c.d);
()$a,b = 4;
()$a.c,d = 5;
()print(()$a.b);
()print(()$a.c.d);

#### Scope ####

()print(a);
()var a = 1;
()(() => (
  ()print(()$a);
  a = 4;
  ()print(()$a);
))();
()print(()$a);

()print(b);
()var b = 1;
()(() => (
  ()print(()$b);
  ()var b = 4;
  ()print(()$b);
))();
()print(()$b);

#### Array mapping ####

(1,2,3)map(() => (()$args.r * 2))

